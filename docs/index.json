[{"content":"Theremin - a music instrument played without touching.\nIt is known to be one of the first electronic instrument, invented about 100 years ago.\nMind blown!\n ","permalink":"https://tahahusain.me/today_years_old/theremin/","summary":"Theremin - a music instrument played without touching.\nIt is known to be one of the first electronic instrument, invented about 100 years ago.\nMind blown!\n ","title":"Theremin"},{"content":"Capybara provides find_field API to find input fields.\nfind_field('id_of_checkbox', type: 'checkbox') To add assertions for input fields we can use Rspec matcher have_field which has similar usage as find_field.\nexpect(page).to have_field('id_of_checkbox', type: 'checkbox') In some cases input fields are not found using find_field, specially when input field(s) are added by third party library.\nLet\u0026rsquo;s take an example of toggle component that we recently used to understand this problem better.\n\u0026lt;Toggle id=\u0026quot;toggleId\u0026quot; name=\u0026quot;toggleName\u0026quot; size=\u0026quot;large\u0026quot; isDisabled={disableToggle} value={toggleValue} isChecked={toggleValue} onChange={handleToggleChange} /\u0026gt; Adding above component in react code generates following HTML.\nLet\u0026rsquo;s try to test our toggle(checkbox) element.\nexpect(page).to have_field('toggleId', type: 'checkbox', disabled: true) This throws following error -\nFailure/Error: expect(page).to have_field('toggleId', type: 'checkbox', disabled: true) expected to find visible field \u0026quot;toggleId\u0026quot; of type \u0026quot;checkbox\u0026quot; but there were no matches. Also found \u0026quot;\u0026quot;, which matched the selector but not all filters. This error is because the input was not part of the visible page.\nTo find such fields we have to add visible option to find_field or have_field APIs.\nfind_field( 'toggleId', type: 'checkbox', disabled: true, value: 'false', visible: false ) or\nexpect(page).to have_field( 'toggleId', type: 'checkbox', disabled: true, value: 'false', visible: false ) ","permalink":"https://tahahusain.me/posts/capybara-with-rspec-how-to-find-and-assert-fields/","summary":"Capybara provides find_field API to find input fields.\nfind_field('id_of_checkbox', type: 'checkbox') To add assertions for input fields we can use Rspec matcher have_field which has similar usage as find_field.\nexpect(page).to have_field('id_of_checkbox', type: 'checkbox') In some cases input fields are not found using find_field, specially when input field(s) are added by third party library.\nLet\u0026rsquo;s take an example of toggle component that we recently used to understand this problem better.\n\u0026lt;Toggle id=\u0026quot;toggleId\u0026quot; name=\u0026quot;toggleName\u0026quot; size=\u0026quot;large\u0026quot; isDisabled={disableToggle} value={toggleValue} isChecked={toggleValue} onChange={handleToggleChange} /\u0026gt; Adding above component in react code generates following HTML.","title":"Capybara with Rspec - How to find and assert fields"},{"content":"By default, React Datepicker selects date and time in local timezone. To select date in a specified timezone we need to convert timezone manually. To do so, we may also need to use library like Moment Timezone.\nThis blog focuses on selecting date and time in standard UTC timezone and its implementation doesn\u0026rsquo;t require extra library installation.\nThe original implementation is suggested by @JohnStarich. This implementation has a bit of tweak to accommodate time picker.\nimport React from \u0026#39;react\u0026#39;; import DatePicker from \u0026#39;react-datepicker\u0026#39;; export default const UTCDatePicker = ({ startDate, endDate, selected, onChange, ...props }) =\u0026gt; { const convertLocalToUTCDate = (localDate) =\u0026gt; { if (!localDate) return localDate; const date = new Date(localDate); const utcDate = new Date( date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), ); return utcDate; } const convertUTCToLocalDate = (utcDate) =\u0026gt; { if (!utcDate) return utcDate; const date = new Date(utcDate); const localDate = new Date( Date.UTC( date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes() ) ); return localDate; } return ( \u0026lt;DatePicker startDate={convertLocalToUTCDate(startDate)} endDate={convertLocalToUTCDate(endDate)} selected={convertLocalToUTCDate(selected)} onChange={date =\u0026gt; onChange(convertUTCToLocalDate(date))} {...props} /\u0026gt; ) }; Above example ignores local timezone while selecting date and time using datepicker and instead uses UTC timezone.\n","permalink":"https://tahahusain.me/posts/react-datepicker-how-to-select-date-time-in-utc/","summary":"By default, React Datepicker selects date and time in local timezone. To select date in a specified timezone we need to convert timezone manually. To do so, we may also need to use library like Moment Timezone.\nThis blog focuses on selecting date and time in standard UTC timezone and its implementation doesn\u0026rsquo;t require extra library installation.\nThe original implementation is suggested by @JohnStarich. This implementation has a bit of tweak to accommodate time picker.","title":"React Datepicker - How to select Date and time in UTC"}]