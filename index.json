[{"content":"In this blog, we will implement multi-row selection and select all with controlled server-side pagination in React using React Table hooks.\nWe will use examples provided by react-table for controlled pagination and row selection and pagination and work our way to acheive desired result.\nImplementation Step 1 To select all rows, we would need unique identifier of all rows pre-fetched on the page. Pass all ids to the Table component.\nStep 2 Use getToggleAllRowsSelectedProps instead of getToggleAllPageRowsSelectedProps for header checkbox to trigger rows select event across all pages. Note - getToggleAllRowsSelectedProps works seamlessly for frontend pagination, but needs to be customized for server-side pagination.\nStep 3 Set autoResetSelectedRows table option to false.\nStep 4 Add following custom stateReducer as a table option.\nDefinition\nconst extractSelectedRowIds = (ids) =\u0026gt; ids.reduce((row, id) =\u0026gt; ({ ...row, [id]: true }), {}); const stateReducer = (ids) =\u0026gt; (newState, action) =\u0026gt; { if (action.type === \u0026#34;toggleAllRowsSelected\u0026#34;) { // determine if the header checkbox is selected or deselected  // if selected then push all ids into selectedRowIds  if (action.value) { return { ...newState, selectedRowIds: extractSelectedRowIds(ids) }; } // else empty selectedRowIds state  return { ...newState, selectedRowIds: {} }; } return newState; }; useTable options\nuseTable( { columns, data, ... autoResetSelectedRows: false, getRowId: (row) =\u0026gt; row.id, stateReducer: stateReducer(ids) }, ... ) Note: ids is an array of unique identifiers of complete dataset.\nAfter setting above custom table options, the header checkbox will select all rows instead of page rows, and selected rows will remain selected even after page change or navigation.\nDownside While implementing these customizations, it\u0026rsquo;s only fair to discuss downside of this approach. When we have huge data, say in thousands or even more, above approach is not recommended because it can slow down the selection and de-selection process on the page.\nConclusion In this blog, we implemented Select All checkbox with controlled pagination and discussed its pitfalls.\nFor complete code of above implementation, please check out following codesandbox.\n Peach out!\n","permalink":"https://tahahusain.me/posts/tech/react-table-row-selection-with-controlled-pagination/","summary":"In this blog, we will implement multi-row selection and select all with controlled server-side pagination in React using React Table hooks.\nWe will use examples provided by react-table for controlled pagination and row selection and pagination and work our way to acheive desired result.\nImplementation Step 1 To select all rows, we would need unique identifier of all rows pre-fetched on the page. Pass all ids to the Table component.","title":"React Table - How to implement row selection with controlled server-side pagination"},{"content":"Theremin - a music instrument played without touching.\nIt is known to be one of the first electronic instrument, invented about 100 years ago.\nMind blown!\n ","permalink":"https://tahahusain.me/posts/music/theremin/","summary":"Theremin - a music instrument played without touching.\nIt is known to be one of the first electronic instrument, invented about 100 years ago.\nMind blown!\n ","title":"Theremin"},{"content":"Capybara provides find_field API to find input fields.\nfind_field('id_of_checkbox', type: 'checkbox') To add assertions for input fields we can use Rspec matcher have_field which has similar usage as find_field.\nexpect(page).to have_field('id_of_checkbox', type: 'checkbox') In some cases input fields are not found using find_field, specially when input field(s) are added by third party library.\nLet\u0026rsquo;s take an example of toggle component that we recently used to understand this problem better.\n\u0026lt;Toggle id=\u0026quot;toggleId\u0026quot; name=\u0026quot;toggleName\u0026quot; size=\u0026quot;large\u0026quot; isDisabled={disableToggle} value={toggleValue} isChecked={toggleValue} onChange={handleToggleChange} /\u0026gt; Adding above component in react code generates following HTML.\nLet\u0026rsquo;s try to test our toggle(checkbox) element.\nexpect(page).to have_field('toggleId', type: 'checkbox', disabled: true) This throws following error -\nFailure/Error: expect(page).to have_field('toggleId', type: 'checkbox', disabled: true) expected to find visible field \u0026quot;toggleId\u0026quot; of type \u0026quot;checkbox\u0026quot; but there were no matches. Also found \u0026quot;\u0026quot;, which matched the selector but not all filters. This error is because the input was not part of the visible page.\nTo find such fields we have to add visible option to find_field or have_field APIs.\nfind_field( 'toggleId', type: 'checkbox', disabled: true, value: 'false', visible: false ) or\nexpect(page).to have_field( 'toggleId', type: 'checkbox', disabled: true, value: 'false', visible: false ) ","permalink":"https://tahahusain.me/posts/tech/capybara-with-rspec-how-to-find-and-assert-fields/","summary":"Capybara provides find_field API to find input fields.\nfind_field('id_of_checkbox', type: 'checkbox') To add assertions for input fields we can use Rspec matcher have_field which has similar usage as find_field.\nexpect(page).to have_field('id_of_checkbox', type: 'checkbox') In some cases input fields are not found using find_field, specially when input field(s) are added by third party library.\nLet\u0026rsquo;s take an example of toggle component that we recently used to understand this problem better.\n\u0026lt;Toggle id=\u0026quot;toggleId\u0026quot; name=\u0026quot;toggleName\u0026quot; size=\u0026quot;large\u0026quot; isDisabled={disableToggle} value={toggleValue} isChecked={toggleValue} onChange={handleToggleChange} /\u0026gt; Adding above component in react code generates following HTML.","title":"Capybara with Rspec - How to find and assert fields"},{"content":"By default, React Datepicker selects date and time in local timezone. To select date in a specified timezone we need to convert timezone manually. To do so, we may also need to use library like Moment Timezone.\nThis blog focuses on selecting date and time in standard UTC timezone and its implementation doesn\u0026rsquo;t require extra library installation.\nThe original implementation is suggested by @JohnStarich. This implementation has a bit of tweak to accommodate time picker.\nimport React from \u0026#39;react\u0026#39;; import DatePicker from \u0026#39;react-datepicker\u0026#39;; export default const UTCDatePicker = ({ startDate, endDate, selected, onChange, ...props }) =\u0026gt; { const convertLocalToUTCDate = (localDate) =\u0026gt; { if (!localDate) return localDate; const date = new Date(localDate); const utcDate = new Date( date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), ); return utcDate; } const convertUTCToLocalDate = (utcDate) =\u0026gt; { if (!utcDate) return utcDate; const date = new Date(utcDate); const localDate = new Date( Date.UTC( date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes() ) ); return localDate; } return ( \u0026lt;DatePicker startDate={convertLocalToUTCDate(startDate)} endDate={convertLocalToUTCDate(endDate)} selected={convertLocalToUTCDate(selected)} onChange={date =\u0026gt; onChange(convertUTCToLocalDate(date))} {...props} /\u0026gt; ) }; Above example ignores local timezone while selecting date and time using datepicker and instead uses UTC timezone.\n","permalink":"https://tahahusain.me/posts/tech/react-datepicker-how-to-select-date-time-in-utc/","summary":"By default, React Datepicker selects date and time in local timezone. To select date in a specified timezone we need to convert timezone manually. To do so, we may also need to use library like Moment Timezone.\nThis blog focuses on selecting date and time in standard UTC timezone and its implementation doesn\u0026rsquo;t require extra library installation.\nThe original implementation is suggested by @JohnStarich. This implementation has a bit of tweak to accommodate time picker.","title":"React Datepicker - How to select Date and time in UTC"}]